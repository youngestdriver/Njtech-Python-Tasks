'''
二、试编写程序，实现以下功能：
1. 定义一个函数(函数名为f)：计算给定的若干整数之积。形参为可变参数
2. 根据用户输入的函数调用表达式，计算结果并将其输出。
具体输入输出格式见样例。（10分）

输入样例：
f(1,2,3)

输出样例：
6
'''

def f(*args):  # 定义一个函数，计算可变形参之积
    s = 1
    for num in args:
        s *= num
    return s

result = eval(input())
print(result)

'''
在Python中，`*args` 是一种用于函数定义中的参数，它允许函数接收任意数量的位置参数。这些参数在函数内部被处理为一个元组。这种方式非常适合当你事先不知道将会传递给函数多少参数，或者想要允许用户提供任意数量的参数时使用。

### 详细解释

- **`*args` 的作用**：它收集额外的位置参数（那些没有被命名的参数）并将它们存储在一个名为 `args` 的元组中。`args` 是一个约定俗成的名称，你也可以使用其他名称，比如 `*parameters`，但 `*args` 是最常见的。
- **使用方式**：在函数定义中，`*args` 被放在其他位置参数之后。函数在调用时可以接收任意数量的位置参数，这些参数在函数内部通过 `args` 访问。

### 示例

下面是一个使用 `*args` 的简单例子，演示如何定义一个函数来接收任意数量的参数并打印它们：

```python
def print_args(*args):
    for arg in args:
        print(arg)

print_args(1, 'hello', 3.14)
```

这个例子中，`print_args` 函数可以接受任意数量的参数。当函数被调用时，如 `print_args(1, 'hello', 3.14)`，这三个参数被收集到元组 `args` 中，并依次被打印出来。

### 使用场景

`*args` 在需要灵活处理函数输入参数的情况下非常有用，例如，编写一个求和函数或者产品函数，这些函数可以接受任意数量的输入值。如之前的示例，定义一个计算任意数量整数乘积的函数：

```python
def multiply(*args):
    result = 1
    for number in args:
        result *= number
    return result

print(multiply(2, 3, 4))  # 输出 24
```

这里，`multiply` 函数可以接受任意数量的参数，计算它们的乘积，并返回结果。
'''